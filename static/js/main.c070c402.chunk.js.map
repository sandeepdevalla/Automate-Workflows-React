{"version":3,"sources":["loginComponent/Login.js","commonComponents/workflowItemComponent/WorkflowItem.js","workflowsListComponent/Workflows.js","commonComponents/nodeItemComponent/NodeItem.js","createWorkflowsComponent/CreateWorkflow.js","App.js","serviceWorker.js","index.js"],"names":["Login","userDetails","Username","Password","useState","loginDisable","setLoginDisable","navigateToWorkflowsRoute","setNavigateToWorkflowsRoute","setUserDetails","useEffect","localStorage","setItem","getUserDetails","event","target","id","value","prevUser","JSON","stringify","to","className","InputGroup","key","Prepend","Text","FormControl","placeholder","onChange","aria-describedby","type","Button","onClick","disabled","block","WorkflowItem","props","statusStyle","data","status","name","index","details","changeWorkflowStatus","style","RenderWorkflows","updateNow","setUpdateNow","workflows","parse","getItem","length","map","workflow","toLowerCase","includes","searchName","Workflows","setSearchName","debounceSearchValue","searchFunction","timer","timerId","context","this","searchArgs","clearTimeout","setTimeout","call","waitForUserTopStopTyping","href","NodeItem","nodeDetails","content","changeNodeDetails","row","col","CreateWorkflow","nodes","setDetails","prevState","pop","push","RenderNodeItems","changeNodeStatus","selectedNode","nodeItems","nodeItem","CustomeRoutes","exact","from","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c070c402.chunk.js","sourcesContent":["import { Redirect } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport {Button, InputGroup, FormControl} from 'react-bootstrap'\n\nimport './Login.css';\n\nexport default function Login() {\n    const userDetails = {\n        Username: '',\n        Password: ''\n    }\n    const [loginDisable, setLoginDisable] = useState(true);\n    const [navigateToWorkflowsRoute, setNavigateToWorkflowsRoute] = useState(false);\n    const [{Username, Password}, setUserDetails] = useState(userDetails);\n    useEffect(()=>{\n        if(Username && Password) {\n            setLoginDisable(false);\n            localStorage.setItem('login',true);\n        } else {\n            setLoginDisable(true);\n            localStorage.setItem('login',false);\n        }\n    })\n    const getUserDetails = (event) => {\n        userDetails[event.target.id] = event.target.value;\n        const {id, value} = event.target;\n        setUserDetails(prevUser => ({...prevUser, [id]: value}))       \n    }\n    const navigateToWorkflows = () => {\n        setNavigateToWorkflowsRoute(true);\n    }\n    if (navigateToWorkflowsRoute === true) {\n        localStorage.setItem('workflows', JSON.stringify([]));\n        return <Redirect to='/workflows' />\n    }\n    return [\n    <h2>Welcome to login page</h2>,\n    <div className=\"login-panel\">\n        <p className=\"login-head\"> Login</p>\n        <InputGroup className=\"login-field\" key=\"basic-addon1\">\n            <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n            placeholder=\"Username\"\n            id=\"Username\"\n            onChange = {getUserDetails} \n            aria-describedby=\"basic-addon1\"\n            />\n      </InputGroup>\n      <InputGroup className=\"login-field\" key=\"basic-addon2\">\n            <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon2\">*</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n            type=\"password\"\n            placeholder=\"Password\"\n            id=\"Password\"\n            onChange = {getUserDetails} \n            aria-describedby=\"basic-addon2\"\n        />\n      </InputGroup>\n      <Button className=\"btn-login\" onClick={navigateToWorkflows} disabled = {loginDisable} key=\"login-btn\" block>Login</Button>\n    </div>\n];\n}","import React from 'react';\n\nimport './WorkflowItem.css';\n\nexport default function WorkflowItem(props) {\n    let statusStyle = {};\n    if (props.data.status == \"COMPLETED\") {\n        statusStyle = {'background': 'lightgreen'  }\n    }\n    const changeWorkflowStatus = (index, details) => {\n        props.changeWorkflowStatus(index, details)\n    }\n    return (\n        <div className=\"workflow-panel\">\n            <div className=\"workflow-title\">\n                {props.data.name}\n            </div>\n            <div className=\"workflow-content\">\n                <p>{props.data.status} </p>\n                <span onClick={() => changeWorkflowStatus(props.data.index, props.data)} className=\"state-icon\" style={statusStyle}>&#10004; </span>\n            </div>\n        </div>\n    )\n}","\n\nimport React, {useState, useEffect} from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport './Workflows.css';\nimport WorkflowItem from '../commonComponents/workflowItemComponent/WorkflowItem';\nfunction RenderWorkflows(props) {\n    const [updateNow, setUpdateNow] = useState(true);\n    const workflows = JSON.parse(localStorage.getItem('workflows'));\n    const changeWorkflowStatus = (index, details) => {\n        if(details.status == \"PENDING\") {\n            workflows[index].status = \"COMPLETED\"\n        } else {\n            workflows[index].status = \"PENDING\"\n        }\n        localStorage.setItem('workflows', JSON.stringify(workflows))\n        setUpdateNow(!updateNow);\n    }\n    useEffect(()=> {\n\n    })\n    return (workflows && workflows.length ? workflows.map((workflow, index) => {\n        workflow['index'] = index;\n        if (!workflow.name.toLowerCase().includes(props.searchName)) {\n            return null\n        }\n        return <WorkflowItem data={workflow} changeWorkflowStatus={changeWorkflowStatus}></WorkflowItem>\n    })\n    : <p>Add your workflow with node details</p>\n    )\n}\nexport default function Workflows() {\n    const [searchName, setSearchName] = useState('');\n    const waitForUserTopStopTyping = function(searchFunction, timer)  {\n        let timerId;\n        return function(...searchArgs) {\n            const context = this;\n            const value = searchArgs[0].target.value;\n            clearTimeout(timerId);\n            timerId = setTimeout(function() {\n                searchFunction.call(context, value)\n            }, timer);\n        }\n        \n    }\n    const searchWorkflows = (name) => {\n        setSearchName(name)\n    } \n    const debounceSearchValue = waitForUserTopStopTyping(searchWorkflows, 300)\n    return [\n    <div className=\"workflow-head\">\n        <div className=\"workflow-filter\">\n            <a href=\"login\" className=\"btn-head\"><Button className=\"back-btn\">Logout</Button></a>\n\n            <input type=\"search\" className=\"search-input\" placeholder=\"Search for the workflows by name\" onChange={debounceSearchValue}></input>\n        </div>\n        <a href=\"workflowDetails\" className=\"btn-create\"><Button className=\"button-create\">+ Create Workflow</Button></a>\n    </div>,\n    <div className=\"workflow-items\">\n        <RenderWorkflows searchName = {searchName}></RenderWorkflows>\n    </div>\n\n    ];\n\n}","import React from 'react';\n\nimport './NodeItem.css';\n\nexport default function NodeItem(props) {\n    const nodeDetails = {\n        name: \"\",\n        content: \"\",\n        index : props.data.index\n    }\n    const changeNodeDetails = (event) => {\n        nodeDetails[event.target.id] = event.target.value;\n        props.changeNodeDetails(nodeDetails);\n    }\n    return (\n        <div className=\"node-panel\">\n            <div className=\"node-title\">\n                <input id=\"name\" className=\"node-input\" onChange={changeNodeDetails} placeholder=\"Task Name\"></input>\n            </div>\n            <div className=\"node-content\">\n                <textarea id=\"content\" className=\"node-content-input\" onChange={changeNodeDetails} placeholder=\"Enter Node Details\" row=\"6\" col=\"5\"></textarea>\n            </div>\n        </div>\n    )\n}","\n\nimport React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Redirect} from 'react-router-dom';\n\nimport './CreateWorkflow.css';\nimport NodeItem from '../commonComponents/nodeItemComponent/NodeItem';\n\nexport default function CreateWorkflow() {\n    const workflowDetails = {\n        name: \"\",\n        status: \"PENDING\",\n        nodes: []\n    }\n    const [navigateToWorkflowsRoute, setNavigateToWorkflowsRoute] = useState(false);\n    const [details, setDetails] = useState(workflowDetails);\n    const saveWorkflowName = (event) => {\n        const name = event.target.value;\n        setDetails((prevState)=> ({...prevState, 'name' : name }))\n    }\n    const addNode = () => {\n        const nodes = details.nodes;\n        nodes.push({\n            name: \"\",\n            content: \"\",\n            status: \"PENDING\"\n        })\n        setDetails((prevState)=> ({...prevState, 'nodes': nodes }))\n    }\n    const deleteNode = () => {\n        const nodes = details.nodes;\n        nodes.pop();\n        setDetails((prevState)=> ({...prevState, 'nodes': nodes }))\n\n    }\n    const changeNodeStatus = (index, selectedNode) => {\n        const nodes = details.nodes;\n        switch (selectedNode.status) {\n            case \"PENDING\": {\n                nodes[index].status = \"IN-PROGRESS\"\n                break;\n            }\n            case \"IN-PROGRESS\": {\n                nodes[index].status = \"COMPLETED\"\n                break;\n            }\n            default : {\n                nodes[index].status = \"PENDING\"\n                break;\n            }\n        }\n        setDetails((prevState)=> ({...prevState, 'nodes': nodes }))\n    }\n    const changeNodeDetails = (nodeDetails) => {\n        const nodes = details.nodes;\n        nodes[nodeDetails.index].name = nodeDetails.name;\n        nodes[nodeDetails.index].content = nodeDetails.content;\n        setDetails((prevState)=> ({...prevState, 'nodes': nodes }))\n    }\n    const saveWorkFlow = () => {\n        const workflows = JSON.parse(localStorage.getItem('workflows'));\n        workflows.push(details);\n        localStorage.setItem('workflows', JSON.stringify(workflows));\n        setNavigateToWorkflowsRoute(true);\n    }\n\n    if (navigateToWorkflowsRoute == true) {\n        return <Redirect to='/workflows' />\n    }\n    return [\n    <div className=\"workflow-head\">\n        <a href=\"workflows\"><Button className=\"back-btn\">Back</Button></a>\n        <div>\n            <input id =\"name\" onChange={saveWorkflowName} placeholder=\"Enter Name\"></input>\n        </div>\n        <Button className=\"button-suffle\">Shuffle</Button>\n        <Button className=\"delete\" onClick={deleteNode}>Delete</Button>\n        <Button className=\"button-node\" onClick={addNode}>+ Add Node</Button>\n        <Button onClick={saveWorkFlow} disabled = {!details.nodes.length}>Save</Button>\n    </div>,\n    <div className=\"nodes-layout\">\n        <RenderNodeItems nodes={details.nodes} changeNodeStatus = {changeNodeStatus} changeNodeDetails = {changeNodeDetails}/>\n    </div>\n\n    ];\n\n}\n\nfunction RenderNodeItems(props) {\n    const nodeItems = props.nodes;\n    const changeNodeStatus = (index, nodeItem) => {\n        props.changeNodeStatus(index,nodeItem);\n    }\n    const changeNodeDetails = (details) => {\n        props.changeNodeDetails(details);\n    }\n    return (nodeItems && nodeItems.length? nodeItems.map((nodeItem,index) => {\n        let statusStyle = {};\n        if (nodeItem.status == \"IN-PROGRESS\") {\n            statusStyle = {'background': 'lightblue'}\n        }\n        if (nodeItem.status == \"COMPLETED\") {\n            statusStyle = {'background': 'lightgreen'  }\n        }\n        nodeItem['index'] = index;\n        return [<NodeItem data={nodeItem} changeNodeDetails= {changeNodeDetails}></NodeItem>, <span onClick={() =>  changeNodeStatus(index, nodeItem)} className=\"state-icon\" style={statusStyle}>&#10004; </span>]\n    })\n    : <p className=\"info\">Add nodes to the workflows</p>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Login from './loginComponent/Login';\nimport Workflows from './workflowsListComponent/Workflows';\nimport CreateWorkflow from './createWorkflowsComponent/CreateWorkflow';\n\nfunction CustomeRoutes() {\n  return (\n    <Router>\n      <Switch>\n      <Redirect exact from=\"/\" to=\"login\" />\n        <Route path=\"/workflowDetails\">\n          <CreateWorkflow />\n        </Route>\n        <Route path=\"/workflows\">\n          <Workflows />\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n      </Switch>\n  </Router>\n  )\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Welcome to the workflows\n      </header>\n      <CustomeRoutes />\n    <footer className=\"App-footer\">\n      Thanks for visiting\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}